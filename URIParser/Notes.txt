The purpose:
This test is intended to provide some reflection on the following:
• How you go about design and development of a relatively small, isolated component;
• How you address aspects of SW quality such as Discoverability, Modularity, Efficiency, and Testability;

Our expectation is that this task should take between two and ten hours work. Do not over-engineer.

Specification:
Create a component, written in a language of your choice of C++, C#, Go, Java, Python, Ruby, Scala, that performs URI parsing. 

Ideally recording its evolution in a Git repository that you will create. Email back (in archive form) your work.

The parser component should be able to identify all of the recognised components of a well-formed URI 
– scheme, user, password, host, port, path, query, fragment – and provide them to the caller in the form of a suitable abstraction. 

The parser component should communicate adequately to the caller upon receipt of malformed input.

Performance is not to be considered a critical requirement in this design. However, if you wish to comment on how your implementation and design might be adjusted to have higher runtime performance, that would be of interest to us.

A Test Driven Development (TDD) approach is recommended, but not required. If you follow a TDD-approach, the suite of tests may be deemed to be the component’s documentation.

Please provide links to any reference material to which you refer.
